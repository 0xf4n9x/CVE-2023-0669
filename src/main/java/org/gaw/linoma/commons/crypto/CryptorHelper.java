package org.gaw.linoma.commons.crypto;

import javax.crypto.SecretKey;
import java.security.spec.KeySpec;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.PBEKeySpec;
import org.apache.commons.codec.binary.Base64;

public class CryptorHelper {
    public static String main(byte[] data, String version) throws Exception, Exception {
        final byte[] IV = {65, 69, 83, 47, 67, 66, 67, 47, 80, 75, 67, 83, 53, 80, 97, 100};

        StandardEncryptionEngine see = null;

        if (version == "2") {
            see = new StandardEncryptionEngine(getInitializationValueV2(), IV, "AES", "AES/CBC/PKCS5Padding");
            return new String(Base64.encodeBase64(see.encrypt(data)), "UTF-8") + "$2";
        } else {
            see = new StandardEncryptionEngine(getInitializationValue(), IV, "AES", "AES/CBC/PKCS5Padding");
            return new String(Base64.encodeBase64(see.encrypt(data)), "UTF-8");
        }
    }
   private static byte[] getInitializationValue() throws Exception {
        //  Version 1 Encryption
       byte[] param1 = {103, 111, 64, 110, 121, 119, 104, 101, 114, 101, 76, 105,
               99, 101, 110, 115, 101, 80, 64, 36, 36, 119, 114, 100};
        byte[] param2 = { -19, 45, -32, -73, 65, 123, -7, 85 };

     SecretKeyFactory factory = SecretKeyFactory.getInstance("PBKDF2WithHmacSHA1");
     KeySpec spec = new PBEKeySpec(new String(param1, "UTF-8").toCharArray(), param2, 9535, 256);
     SecretKey tmp = factory.generateSecret(spec);
     return tmp.getEncoded();
   }
    private static byte[] getInitializationValueV2() throws Exception {
        //  Version 2 Encryption
        byte[] param1 = {112, 70, 82, 103, 114, 79, 77, 104, 97, 117, 117, 115, 89, 50, 90, 68, 83, 104, 84, 115, 113, 113, 50, 111, 90, 88, 75, 116, 111, 87, 55, 82};
        byte[] param2 = {99, 76, 71, 87, 49, 74, 119, 83, 109, 112, 50, 75, 104, 107, 56, 73};

        SecretKeyFactory factory = SecretKeyFactory.getInstance("PBKDF2WithHmacSHA1");
        KeySpec spec = new PBEKeySpec(new String(param1, "UTF-8").toCharArray(), param2, 3392, 256);
        SecretKey tmp = factory.generateSecret(spec);
        return tmp.getEncoded();
    }
}
