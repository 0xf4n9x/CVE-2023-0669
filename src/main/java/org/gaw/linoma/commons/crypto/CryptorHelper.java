package org.gaw.linoma.commons.crypto;

import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.PBEKeySpec;
import org.apache.commons.codec.binary.Base64;

import org.gaw.linoma.commons.crypto.StandardEncryptionEngine;

public class CryptorHelper {
    public static String main(byte[] data) throws Exception, Exception {
        final byte[] IV = {65, 69, 83, 47, 67, 66, 67, 47, 80, 75, 67, 83, 53, 80, 97, 100 };

        StandardEncryptionEngine see = new StandardEncryptionEngine(getInitializationValue(), IV, "AES", "AES/CBC/PKCS5Padding");

        return new String(Base64.encodeBase64(see.encrypt(data)), "UTF-8");
    }
   private static byte[] getInitializationValue() throws Exception {
     byte[] arrayOfByte1 = { 103, 111, 64, 110, 121, 119, 104, 101, 114, 101, 76, 105, 99, 101, 110, 115, 101, 80, 64, 36, 36, 119, 114, 100 };


     byte[] arrayOfByte2 = { -19, 45, -32, -73, 65, 123, -7, 85 };
     char c1 = '┿';
     char c2 = 'Ā';

     SecretKeyFactory secretKeyFactory = SecretKeyFactory.getInstance("PBKDF2WithHmacSHA1");
     PBEKeySpec pBEKeySpec = new PBEKeySpec((new String(arrayOfByte1, "UTF-8")).toCharArray(), arrayOfByte2, c1, c2);
     SecretKey secretKey = secretKeyFactory.generateSecret(pBEKeySpec);
     return secretKey.getEncoded();
   }
}
